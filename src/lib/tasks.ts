
import type { Task, User, TaskStatus } from '@/types';
// import { format } from 'date-fns'; // Keep if needed for date manipulations later

// NOTE: MOCK_TASKS and MOCK_ASSIGN_USERS arrays have been removed.
// All task and assignable user data should be fetched from/stored in MongoDB.

// Simulate API delay for all functions
const simulateApiDelay = (duration = 100 + Math.random() * 200) => new Promise(resolve => setTimeout(resolve, duration));

export async function getTasks(): Promise<Task[]> {
  await simulateApiDelay();
  // TODO: Implement MongoDB query to fetch all tasks.
  // Example: const tasks = await TaskModel.find().sort({ createdAt: -1 }).lean();
  // return tasks.map(task => ({ ...task, id: task._id.toString() }));
  console.warn('MongoDB implementation needed for getTasks. Returning empty array.');
  return [];
}

export async function getTaskById(id: string): Promise<Task | undefined> {
  await simulateApiDelay();
  // TODO: Implement MongoDB query to fetch a task by its ID.
  // Example: const task = await TaskModel.findById(id).lean();
  // return task ? { ...task, id: task._id.toString() } : undefined;
  console.warn('MongoDB implementation needed for getTaskById. Returning undefined.');
  return undefined;
}

export async function createTask(taskData: Omit<Task, 'id' | 'createdAt' | 'updatedAt'>): Promise<Task> {
  await simulateApiDelay();
  // TODO: Implement MongoDB operation to create a new task.
  // Example: const newTask = new TaskModel({ ...taskData, createdAt: new Date(), updatedAt: new Date() });
  // await newTask.save();
  // return { ...newTask.toObject(), id: newTask._id.toString() };
  console.warn('MongoDB implementation needed for createTask. Throwing error.');
  throw new Error('MongoDB implementation needed for createTask.');
}

export async function updateTask(id: string, updates: Partial<Omit<Task, 'id' | 'createdAt' | 'updatedAt' | 'assignedTo'>> & { assignedTo?: string | null }): Promise<Task | null> {
  await simulateApiDelay();
  // TODO: Implement MongoDB operation to update a task.
  // Handle assignedTo: if (updates.assignedTo === null) updates.assignedTo = undefined;
  // Example: const updatedTask = await TaskModel.findByIdAndUpdate(id, { ...updates, updatedAt: new Date() }, { new: true }).lean();
  // return updatedTask ? { ...updatedTask, id: updatedTask._id.toString() } : null;
  console.warn('MongoDB implementation needed for updateTask. Returning null.');
  return null;
}

export async function deleteTask(id: string): Promise<boolean> {
  await simulateApiDelay();
  // TODO: Implement MongoDB operation to delete a task.
  // Example: const result = await TaskModel.findByIdAndDelete(id);
  // return !!result;
  console.warn('MongoDB implementation needed for deleteTask. Returning false.');
  return false;
}

export async function getAssignableUsers(): Promise<User[]> {
  await simulateApiDelay();
  // TODO: Implement MongoDB query to fetch all assignable users (e.g., from a Users collection).
  // Example: const users = await UserModel.find({}, 'id name designation').sort({ name: 1 }).lean();
  // return users.map(user => ({ ...user, id: user._id.toString() }));
  console.warn('MongoDB implementation needed for getAssignableUsers. Returning empty array.');
  return [];
}

export async function getAssignableUserById(userId: string): Promise<User | null> {
  await simulateApiDelay();
  // TODO: Implement MongoDB query to fetch an assignable user by ID.
  // Example: const user = await UserModel.findById(userId, 'id name designation').lean();
  // return user ? { ...user, id: user._id.toString() } : null;
  console.warn('MongoDB implementation needed for getAssignableUserById. Returning null.');
  return null;
}

export async function createAssignableUser(name: string, designation: string): Promise<User> {
  await simulateApiDelay();
  // TODO: Implement MongoDB operation to create a new assignable user.
  // Example: const newUser = new UserModel({ name, designation, email: autoGeneratedEmailIfNeeded });
  // await newUser.save();
  // return { ...newUser.toObject(), id: newUser._id.toString() };
  console.warn('MongoDB implementation needed for createAssignableUser. Throwing error.');
  throw new Error('MongoDB implementation needed for createAssignableUser.');
}

export async function updateAssignableUser(userId: string, updates: { name?: string; designation?: string }): Promise<User | null> {
  await simulateApiDelay();
  // TODO: Implement MongoDB operation to update an assignable user.
  // Example: const updatedUser = await UserModel.findByIdAndUpdate(userId, updates, { new: true }).lean();
  // return updatedUser ? { ...updatedUser, id: updatedUser._id.toString() } : null;
  console.warn('MongoDB implementation needed for updateAssignableUser. Returning null.');
  return null;
}

export async function deleteAssignableUser(userId: string): Promise<boolean> {
  await simulateApiDelay();
  // TODO: Implement MongoDB operation to delete an assignable user.
  // 1. Delete the user: const result = await UserModel.findByIdAndDelete(userId);
  // 2. Unassign tasks from the deleted user: await TaskModel.updateMany({ assignedTo: userId }, { $unset: { assignedTo: "" } });
  // return !!result;
  console.warn('MongoDB implementation needed for deleteAssignableUser. Returning false.');
  return false;
}


export const TASK_STATUSES: { value: TaskStatus; label: string }[] = [
  { value: 'todo', label: 'To Do' },
  { value: 'inprogress', label: 'In Progress' },
  { value: 'done', label: 'Done' },
  { value: 'archived', label: 'Archived' },
];
